define("ember-cli-cordova/initializers/in-app-livereload", 
  ["ember-cli-cordova/utils/redirect","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var redirect = __dependency1__["default"];

    var initialize = function(app, config) {
      var url = config.cordova.emberUrl || 'http://localhost:4200';
      return redirect(url);
    };
    __exports__.initialize = initialize;
    __exports__["default"] = {
      name: 'cordova:in-app-livereload',
      initialize: initialize
    };
  });
define("ember-cli-cordova/mixins/controllers/nav-bar", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.Mixin.create({
      nav: {
        title: { },
        leftButton: { },
        rightButton: { }
      },

      actions: {
        leftButton: function() {
          var leftAction = this.get('nav.leftButton.action');

          if(leftAction) {
            leftAction();
          }
        },

        rightButton: function() {
          var rightAction = this.get('nav.rightButton.action');

          if(rightAction) {
            rightAction();
          }
        },

        resetNavBar: function() {
          this.set('nav', {
            title: { },
            leftButton: { },
            rightButton: { }
          });
        }
      }
    });
  });
define("ember-cli-cordova/mixins/cordova-events", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    /* jshint esnext:true */

    var Ember = __dependency1__["default"];

    // include this mixin to define cordova event listeners with an onCordova object
    //
    // onCordova supports arrays, strings, and anonymous functions, e.g.:
    //
    // ```
    // export default MyEmberObject.extend({
    //   onCordova: {
    //     pause: ['pauseListening', 'disconnectPeripheral'],
    //     resume: 'resumeListening',
    //     volumeup: function() { console.log('a little bit louder now'); }
    //   }
    // });
    // ```
    __exports__["default"] = Ember.Mixin.create({
      cordova: Ember.inject.service(),

      subscribeToCordovaEvents: Ember.on('init', function() {
        var cordova = this.get('cordova'),
            onCordova = this.get('onCordova');

        Ember.keys(onCordova).forEach(function(key) {
          var func = Ember.get(onCordova, key);

          // subscribe to events
          if (func instanceof Array) {
            func.forEach(function(fn) {
              if (this._validateIsFunction(fn)) {
                cordova.on(key, this, fn);
              }
            }, this);
          } else {
            if (this._validateIsFunction(func)) {
              cordova.on(key, this, func);
            }
          }
        }, this);
      }),

      _validateIsFunction: function(func) {
        var isFunction = false;

        if (func instanceof Function) {
          isFunction = true;
        } else if (typeof func === 'string') {
          var fn = this.get(func);

          isFunction = fn instanceof Function;
        }

        return isFunction;
      }
    });
  });
define("ember-cli-cordova/mixins/routes/nav-bar", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.Mixin.create({
      _navController: Ember.computed('nav.controller', function() {
        var name = this.get('nav.controller') || 'application';

        return this.controllerFor(name);
      }),

      afterModel: function(model) {
        this._setDefaults();
        this._setNavOptions(model);
        this._setNavActions();

        return this._super.apply(this, arguments);
      },

      // Since we are using so many nested paths this makes sure they are set to
      // null values
      _setDefaults: function() {
        var ctrl = this.get('_navController');

        if(!ctrl.get('nav')) {
          ctrl.send('resetNavBar');

        } else if(!ctrl.get('nav.title')) {
          ctrl.set('nav.title', {});

        } else if(!ctrl.get('nav.leftButton')) {
          ctrl.set('nav.leftButton', {});

        } else if(!ctrl.get('nav.rightButton')) {
          ctrl.set('nav.rightButton', {});
        }
      },

      _setNavOptions: function(model) {
        var ctrl = this.get('_navController');

        var navOptions = Ember.A([
          'title.text',
          'leftButton.text', 'leftButton.icon',
          'rightButton.text', 'rightButton.icon'
        ]);

        navOptions.forEach(function(key){
          var optionPath = 'nav.' + key;
          var value      = this.get(optionPath);

          if (value) {
            if(Ember.typeOf(value) === 'function') {
              value = value.call(this, model);
            }

            ctrl.set(optionPath, value);
          }
        }, this);
      },

      _setNavActions: function() {
        var ctrl = this.get('_navController');

        Ember.A(['leftButton', 'rightButton']).forEach(function(button) {
          var actionPath = 'nav.' + button + '.action';

          var action = this.get(actionPath);
          if (action) {
            ctrl.set(actionPath, Ember.run.bind(this, action));
          }
        }, this);
      },

      actions: {
        willTransition: function() {
          this.get('_navController').send('resetNavBar');
          return this._super.apply(this, arguments);
        }
      }
    });
  });
define("ember-cli-cordova/services/cordova", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    /* jshint esnext:true */

    var Ember = __dependency1__["default"];

    // from https://cordova.apache.org/docs/en/4.0.0/cordova_events_events.md.html
    // use var because cordova/android was throwing errors re: const && strict mode
    var CORDOVA_EVENTS = Ember.A([
      'deviceready',
      'pause',
      'resume',
      'backbutton',
      'menubutton',
      'searchbutton',
      'startcallbutton',
      'endcallbutton',
      'volumedownbutton',
      'volumeupbutton',
      'batterycritical',
      'batterylow',
      'batterystatus',
      'online',
      'offline'
    ]);

    // the cordova service listens for cordova events emitted to the document,
    // and triggers the same events in emberland.
    //
    // subscribe to cordova events as such:
    //
    // ```javascript
    // export default MyEmberObject.extend({
    //   cordova: Ember.inject.service()
    //
    //   init: function() {
    //     cordova.on('resume', function() { console.log('i am resumed'); });
    //   }
    // });
    // ```
    __exports__["default"] = Ember.Service.extend(
      Ember.Evented, {

      setEventTriggers: Ember.on('init', function() {
        var _this = this;

        CORDOVA_EVENTS.forEach(function(eventName) {
          Ember.$(document).on(eventName, function() {
            _this.trigger(eventName);
          });
        });
      })
    });
  });
define("ember-cli-cordova/utils/redirect", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = function(url) {
      if(window.location.href.indexOf('file://') > -1) {
        Ember.run.later(function() {
          window.location.replace(url);
        }, 50);
      }
    }
  });
define("ember-cli-cordova", ["ember-cli-cordova/index","exports"], function(__index__, __exports__) {
  "use strict";
  Object.keys(__index__).forEach(function(key){
    __exports__[key] = __index__[key];
  });
});
//# sourceMappingURL=addons.map