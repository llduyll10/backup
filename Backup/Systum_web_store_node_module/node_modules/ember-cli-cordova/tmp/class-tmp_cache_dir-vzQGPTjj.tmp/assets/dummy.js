define("dummy/Ember CLI QUnit/tests/ember-cli-qunit/initializers/in-app-livereload.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-qunit/initializers');
    test('ember-cli-qunit/initializers/in-app-livereload.js should pass jshint', function() { 
      ok(true, 'ember-cli-qunit/initializers/in-app-livereload.js should pass jshint.'); 
    });
  });
define("dummy/Ember CLI QUnit/tests/ember-cli-qunit/mixins/controllers/nav-bar.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-qunit/mixins/controllers');
    test('ember-cli-qunit/mixins/controllers/nav-bar.js should pass jshint', function() { 
      ok(true, 'ember-cli-qunit/mixins/controllers/nav-bar.js should pass jshint.'); 
    });
  });
define("dummy/Ember CLI QUnit/tests/ember-cli-qunit/mixins/cordova-events.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-qunit/mixins');
    test('ember-cli-qunit/mixins/cordova-events.js should pass jshint', function() { 
      ok(true, 'ember-cli-qunit/mixins/cordova-events.js should pass jshint.'); 
    });
  });
define("dummy/Ember CLI QUnit/tests/ember-cli-qunit/mixins/routes/nav-bar.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-qunit/mixins/routes');
    test('ember-cli-qunit/mixins/routes/nav-bar.js should pass jshint', function() { 
      ok(true, 'ember-cli-qunit/mixins/routes/nav-bar.js should pass jshint.'); 
    });
  });
define("dummy/Ember CLI QUnit/tests/ember-cli-qunit/services/cordova.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-qunit/services');
    test('ember-cli-qunit/services/cordova.js should pass jshint', function() { 
      ok(true, 'ember-cli-qunit/services/cordova.js should pass jshint.'); 
    });
  });
define("dummy/Ember CLI QUnit/tests/ember-cli-qunit/utils/redirect.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-qunit/utils');
    test('ember-cli-qunit/utils/redirect.js should pass jshint', function() { 
      ok(true, 'ember-cli-qunit/utils/redirect.js should pass jshint.'); 
    });
  });
define("dummy/app", 
  ["ember","ember/resolver","ember/load-initializers","dummy/config/environment","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var Resolver = __dependency2__["default"];
    var loadInitializers = __dependency3__["default"];
    var config = __dependency4__["default"];

    Ember.MODEL_FACTORY_INJECTIONS = true;

    var App = Ember.Application.extend({
      modulePrefix: config.modulePrefix,
      podModulePrefix: config.podModulePrefix,
      Resolver: Resolver
    });

    loadInitializers(App, config.modulePrefix);

    __exports__["default"] = App;
  });
define("dummy/components/cdv-nav-bar", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];

    __exports__["default"] = Ember.Component.extend({
      tagName: 'header'
    });
  });
define("dummy/controllers/nav-bar", 
  ["ember","ember-cli-cordova/mixins/controllers/nav-bar","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var NavBarMixin = __dependency2__["default"];

    __exports__["default"] = Ember.Controller.extend(NavBarMixin);
  });
define("dummy/ember-cli-cordova/tests/ember-cli-cordova/initializers/in-app-livereload.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-cordova/initializers');
    test('ember-cli-cordova/initializers/in-app-livereload.js should pass jshint', function() { 
      ok(true, 'ember-cli-cordova/initializers/in-app-livereload.js should pass jshint.'); 
    });
  });
define("dummy/ember-cli-cordova/tests/ember-cli-cordova/mixins/controllers/nav-bar.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-cordova/mixins/controllers');
    test('ember-cli-cordova/mixins/controllers/nav-bar.js should pass jshint', function() { 
      ok(true, 'ember-cli-cordova/mixins/controllers/nav-bar.js should pass jshint.'); 
    });
  });
define("dummy/ember-cli-cordova/tests/ember-cli-cordova/mixins/cordova-events.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-cordova/mixins');
    test('ember-cli-cordova/mixins/cordova-events.js should pass jshint', function() { 
      ok(true, 'ember-cli-cordova/mixins/cordova-events.js should pass jshint.'); 
    });
  });
define("dummy/ember-cli-cordova/tests/ember-cli-cordova/mixins/routes/nav-bar.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-cordova/mixins/routes');
    test('ember-cli-cordova/mixins/routes/nav-bar.js should pass jshint', function() { 
      ok(true, 'ember-cli-cordova/mixins/routes/nav-bar.js should pass jshint.'); 
    });
  });
define("dummy/ember-cli-cordova/tests/ember-cli-cordova/services/cordova.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-cordova/services');
    test('ember-cli-cordova/services/cordova.js should pass jshint', function() { 
      ok(true, 'ember-cli-cordova/services/cordova.js should pass jshint.'); 
    });
  });
define("dummy/ember-cli-cordova/tests/ember-cli-cordova/utils/redirect.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-cli-cordova/utils');
    test('ember-cli-cordova/utils/redirect.js should pass jshint', function() { 
      ok(true, 'ember-cli-cordova/utils/redirect.js should pass jshint.'); 
    });
  });
define("dummy/ember-data/tests/ember-data/initializers/in-app-livereload.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-data/initializers');
    test('ember-data/initializers/in-app-livereload.js should pass jshint', function() { 
      ok(true, 'ember-data/initializers/in-app-livereload.js should pass jshint.'); 
    });
  });
define("dummy/ember-data/tests/ember-data/mixins/controllers/nav-bar.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-data/mixins/controllers');
    test('ember-data/mixins/controllers/nav-bar.js should pass jshint', function() { 
      ok(true, 'ember-data/mixins/controllers/nav-bar.js should pass jshint.'); 
    });
  });
define("dummy/ember-data/tests/ember-data/mixins/cordova-events.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-data/mixins');
    test('ember-data/mixins/cordova-events.js should pass jshint', function() { 
      ok(true, 'ember-data/mixins/cordova-events.js should pass jshint.'); 
    });
  });
define("dummy/ember-data/tests/ember-data/mixins/routes/nav-bar.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-data/mixins/routes');
    test('ember-data/mixins/routes/nav-bar.js should pass jshint', function() { 
      ok(true, 'ember-data/mixins/routes/nav-bar.js should pass jshint.'); 
    });
  });
define("dummy/ember-data/tests/ember-data/services/cordova.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-data/services');
    test('ember-data/services/cordova.js should pass jshint', function() { 
      ok(true, 'ember-data/services/cordova.js should pass jshint.'); 
    });
  });
define("dummy/ember-data/tests/ember-data/utils/redirect.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - ember-data/utils');
    test('ember-data/utils/redirect.js should pass jshint', function() { 
      ok(true, 'ember-data/utils/redirect.js should pass jshint.'); 
    });
  });
define("dummy/initializers/in-app-livereload", 
  ["dummy/config/environment","ember-cli-cordova/initializers/in-app-livereload","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    /* globals cordova */

    var config = __dependency1__["default"];
    var reloadInitializer = __dependency2__["default"];

    var inAppReload = reloadInitializer.initialize;

    var initialize = function(app) {
      if(typeof cordova === 'undefined' ||
          config.environment !== 'development' ||
          (config.cordova &&
            (!config.cordova.liveReload || !config.cordova.liveReload.enabled))) {
        return;
      }

      return inAppReload(app, config);
    };
    __exports__.initialize = initialize;
    __exports__["default"] = {
      name: 'cordova:in-app-livereload',
      initialize: initialize
    };
  });
define("dummy/qunit-bdd/tests/qunit-bdd/initializers/in-app-livereload.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - qunit-bdd/initializers');
    test('qunit-bdd/initializers/in-app-livereload.js should pass jshint', function() { 
      ok(true, 'qunit-bdd/initializers/in-app-livereload.js should pass jshint.'); 
    });
  });
define("dummy/qunit-bdd/tests/qunit-bdd/mixins/controllers/nav-bar.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - qunit-bdd/mixins/controllers');
    test('qunit-bdd/mixins/controllers/nav-bar.js should pass jshint', function() { 
      ok(true, 'qunit-bdd/mixins/controllers/nav-bar.js should pass jshint.'); 
    });
  });
define("dummy/qunit-bdd/tests/qunit-bdd/mixins/cordova-events.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - qunit-bdd/mixins');
    test('qunit-bdd/mixins/cordova-events.js should pass jshint', function() { 
      ok(true, 'qunit-bdd/mixins/cordova-events.js should pass jshint.'); 
    });
  });
define("dummy/qunit-bdd/tests/qunit-bdd/mixins/routes/nav-bar.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - qunit-bdd/mixins/routes');
    test('qunit-bdd/mixins/routes/nav-bar.js should pass jshint', function() { 
      ok(true, 'qunit-bdd/mixins/routes/nav-bar.js should pass jshint.'); 
    });
  });
define("dummy/qunit-bdd/tests/qunit-bdd/services/cordova.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - qunit-bdd/services');
    test('qunit-bdd/services/cordova.js should pass jshint', function() { 
      ok(true, 'qunit-bdd/services/cordova.js should pass jshint.'); 
    });
  });
define("dummy/qunit-bdd/tests/qunit-bdd/utils/redirect.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - qunit-bdd/utils');
    test('qunit-bdd/utils/redirect.js should pass jshint', function() { 
      ok(true, 'qunit-bdd/utils/redirect.js should pass jshint.'); 
    });
  });
define("dummy/router", 
  ["ember","dummy/config/environment","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var config = __dependency2__["default"];

    var Router = Ember.Router.extend({
      location: config.locationType
    });

    Router.map(function() {
      this.resource('nav-bar', function() {
        this.route('page-1');
        this.route('options-from-model');
        this.route('should-reset');
      });
    });

    __exports__["default"] = Router;
  });
define("dummy/routes/nav-bar/index", 
  ["ember","ember-cli-cordova/mixins/routes/nav-bar","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var NavBarMixin = __dependency2__["default"];

    __exports__["default"] = Ember.Route.extend(NavBarMixin, {
      nav: {
        controller: 'nav-bar',
        title: {
          text: 'Index'
        },
        leftButton: {
          text: 'iLeft'
        },
        rightButton: {
          text: 'iRight'
        },
      }
    });
  });
define("dummy/routes/nav-bar/options-from-model", 
  ["ember","ember-cli-cordova/mixins/routes/nav-bar","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var NavBarMixin = __dependency2__["default"];

    __exports__["default"] = Ember.Route.extend(NavBarMixin, {
      nav: {
        controller: 'nav-bar',
        title: {
          text: function(model) {
            return model.get('title');
          }
        },

        leftButton: {
          text: function(model) {
            return model.get('leftButton');
          },
          icon: function(model) {
            return model.get('leftClass');
          }
        },

        rightButton: {
          text: function(model) {
            return model.get('rightButton');
          },
          icon: function(model) {
            return model.get('rightClass');
          }
        }
      },

      model: function() {
        return Ember.Object.create({
          title:        'modelOption',
          leftButton:   'modelLeft',
          leftClass:    'leftClass',
          rightButton:  'modelRight',
          rightClass:   'rightClass'
        });
      }
    });
  });
define("dummy/routes/nav-bar/page-1", 
  ["ember","ember-cli-cordova/mixins/routes/nav-bar","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var NavBarMixin = __dependency2__["default"];

    __exports__["default"] = Ember.Route.extend(NavBarMixin, {
      nav: {
        controller: 'nav-bar',
        title: {
          text: 'Page 1'
        },
        leftButton: {
          text: 'pLeft'
        },
        rightButton: {
          text: 'pRight'
        },
      }
    });
  });
define("dummy/services/cordova", 
  ["ember-cli-cordova/services/cordova","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    /* jshint esnext:true */

    var CordovaService = __dependency1__["default"];

    __exports__["default"] = CordovaService.extend({});
  });
define("dummy/templates/application", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
    /**/) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1;


      stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n");
      return buffer;
      
    });
  });
define("dummy/templates/cdv-generic-nav-bar", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
    /**/) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, escapeExpression=this.escapeExpression, self=this;

    function program1(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("\n  <button ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "leftButton", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(">\n    ");
      stack1 = helpers['if'].call(depth0, "nav.leftButton.icon", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n    ");
      stack1 = helpers._triageMustache.call(depth0, "nav.leftButton.text", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n  </button>\n");
      return buffer;
      }
    function program2(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("\n      <i class=\"icon ");
      stack1 = helpers._triageMustache.call(depth0, "nav.leftButton.icon", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\"></i>\n    ");
      return buffer;
      }

    function program4(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("\n  <h1>\n    ");
      stack1 = helpers._triageMustache.call(depth0, "nav.title.text", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n  </h1>\n");
      return buffer;
      }

    function program6(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("\n  <button ");
      data.buffer.push(escapeExpression(helpers.action.call(depth0, "rightButton", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
      data.buffer.push(">\n    ");
      stack1 = helpers['if'].call(depth0, "nav.rightButton.icon", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n    ");
      stack1 = helpers._triageMustache.call(depth0, "nav.rightButton.text", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n  </button>\n");
      return buffer;
      }
    function program7(depth0,data) {
      
      var buffer = '', stack1;
      data.buffer.push("\n      <i class=\"icon ");
      stack1 = helpers._triageMustache.call(depth0, "nav.rightButton.icon", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\"></i>\n    ");
      return buffer;
      }

      stack1 = helpers['if'].call(depth0, "nav.leftButton.text", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n\n");
      stack1 = helpers['if'].call(depth0, "nav.title.text", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n\n");
      stack1 = helpers['if'].call(depth0, "nav.rightButton.text", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n");
      return buffer;
      
    });
  });
define("dummy/templates/components/cdv-nav-bar", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
    /**/) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1;


      stack1 = helpers._triageMustache.call(depth0, "yield", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n");
      return buffer;
      
    });
  });
define("dummy/templates/nav-bar", 
  ["ember","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    __exports__["default"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
    /**/) {
    this.compilerInfo = [4,'>= 1.0.0'];
    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
      var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this, functionType="function", blockHelperMissing=helpers.blockHelperMissing;

    function program1(depth0,data) {
      
      var buffer = '', helper, options;
      data.buffer.push("\n  ");
      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "cdv-generic-nav-bar", options) : helperMissing.call(depth0, "partial", "cdv-generic-nav-bar", options))));
      data.buffer.push("\n");
      return buffer;
      }

      options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data}
      if (helper = helpers['cdv-nav-bar']) { stack1 = helper.call(depth0, options); }
      else { helper = (depth0 && depth0['cdv-nav-bar']); stack1 = typeof helper === functionType ? helper.call(depth0, options) : helper; }
      if (!helpers['cdv-nav-bar']) { stack1 = blockHelperMissing.call(depth0, 'cdv-nav-bar', {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data}); }
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n\n");
      stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
      data.buffer.push("\n");
      return buffer;
      
    });
  });
define("dummy/tests/app.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - .');
    test('app.js should pass jshint', function() { 
      ok(true, 'app.js should pass jshint.'); 
    });
  });
define("dummy/tests/controllers/nav-bar.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - controllers');
    test('controllers/nav-bar.js should pass jshint', function() { 
      ok(true, 'controllers/nav-bar.js should pass jshint.'); 
    });
  });
define("dummy/tests/dummy/tests/helpers/describe-app.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - dummy/tests/helpers');
    test('dummy/tests/helpers/describe-app.js should pass jshint', function() { 
      ok(true, 'dummy/tests/helpers/describe-app.js should pass jshint.'); 
    });
  });
define("dummy/tests/dummy/tests/helpers/resolver.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - dummy/tests/helpers');
    test('dummy/tests/helpers/resolver.js should pass jshint', function() { 
      ok(true, 'dummy/tests/helpers/resolver.js should pass jshint.'); 
    });
  });
define("dummy/tests/dummy/tests/helpers/start-app.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - dummy/tests/helpers');
    test('dummy/tests/helpers/start-app.js should pass jshint', function() { 
      ok(true, 'dummy/tests/helpers/start-app.js should pass jshint.'); 
    });
  });
define("dummy/tests/dummy/tests/integration/nav-bar-test.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - dummy/tests/integration');
    test('dummy/tests/integration/nav-bar-test.js should pass jshint', function() { 
      ok(true, 'dummy/tests/integration/nav-bar-test.js should pass jshint.'); 
    });
  });
define("dummy/tests/dummy/tests/test-helper.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - dummy/tests');
    test('dummy/tests/test-helper.js should pass jshint', function() { 
      ok(true, 'dummy/tests/test-helper.js should pass jshint.'); 
    });
  });
define("dummy/tests/helpers/describe-app", 
  ["ember","dummy/tests/helpers/start-app","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var startApp = __dependency2__["default"];

    __exports__["default"] = function(name, callback) {
      return describe(name, function() {
        before(function() {
          this.app = startApp();
        });

        after(function() {
          Ember.run(this.app, 'destroy');
        });

        lazy('store', function() {
          return this.app.__container__.lookup('store:main');
        });

        helper('lookupController', function(name) {
          return this.app.__container__.lookup('controller:' + name);
        });

        callback.call(this);
      });
    }
  });
define("dummy/tests/helpers/resolver", 
  ["ember/resolver","dummy/config/environment","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var Resolver = __dependency1__["default"];
    var config = __dependency2__["default"];

    var resolver = Resolver.create();

    resolver.namespace = {
      modulePrefix: config.modulePrefix,
      podModulePrefix: config.podModulePrefix
    };

    __exports__["default"] = resolver;
  });
define("dummy/tests/helpers/start-app", 
  ["ember","dummy/app","dummy/router","dummy/config/environment","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var Application = __dependency2__["default"];
    var Router = __dependency3__["default"];
    var config = __dependency4__["default"];

    __exports__["default"] = function startApp(attrs) {
      var App;

      var attributes = Ember.merge({}, config.APP);
      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;

      Router.reopen({
        location: 'none'
      });

      Ember.run(function() {
        App = Application.create(attributes);
        App.setupForTesting();
        App.injectTestHelpers();
      });

      App.reset(); // this shouldn't be needed, i want to be able to "start an app at a specific URL"

      return App;
    }
  });
define("dummy/tests/integration/nav-bar-test", 
  ["ember","dummy/tests/helpers/describe-app"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var Ember = __dependency1__["default"];
    var describeApp = __dependency2__["default"];

    describeApp('Integration - Nav Bar', function() {
      describe('Route Mixin', function() {
        describe('Template', function() {
          it('updates between routes', function() {
            visit('nav-bar');

            andThen(function() {
              equal(find('header h1').text().trim(), 'Index');
              equal(find('header button:first').text().trim(), 'iLeft');
              equal(find('header button:last').text().trim(), 'iRight');
            });

            visit('nav-bar/page-1');

            andThen(function() {
              equal(find('header h1').text().trim(), 'Page 1');
              equal(find('header button:first').text().trim(), 'pLeft');
              equal(find('header button:last').text().trim(), 'pRight');
            });
          });

          it('values can be a function', function() {
            visit('nav-bar/options-from-model');

            andThen(function() {
              var leftButton  = find('header button:first');
              var title       = find('header h1');
              var rightButton = find('header button:last');

              equal(title.text().trim(), 'modelOption');

              equal(leftButton.text().trim(), 'modelLeft');
              ok(leftButton.find('i').hasClass('leftClass'));

              equal(rightButton.text().trim(), 'modelRight');
              ok(rightButton.find('i').hasClass('rightClass'));
            });
          });
        });

        describe('Actions', function() {
          before(function() {
            var navIndex = this.app.__container__.lookup('route:nav-bar/index');
            var page1    = this.app.__container__.lookup('route:nav-bar/page-1');
            var spec     = this;

            spec.navIndexStub = sinon.stub();
            navIndex.setProperties({
              'nav.leftButton.action': function() {
                spec.navIndexStub('left');
              },
              'nav.rightButton.action': function() {
                spec.navIndexStub('right');
              }
            });

            spec.page1Stub = sinon.stub();
            page1.setProperties({
              'nav.leftButton.action': function() {
                spec.page1Stub('left');
              },
              'nav.rightButton.action': function() {
                spec.page1Stub('right');
              }
            });
          });

          it('updates between routes', function() {
            visit('nav-bar');

            click('header button:first');

            andThen(Ember.run.bind(this, function() {
              ok(this.navIndexStub.calledWith('left'));
              ok(!this.navIndexStub.calledWith('right'));
            }));

            click('header button:last');

            andThen(Ember.run.bind(this, function() {
              ok(this.navIndexStub.calledWith('left'));
              ok(this.navIndexStub.calledWith('right'));
            }));

            visit('nav-bar/page-1');

            click('header button:first');

            andThen(Ember.run.bind(this, function() {
              ok(this.page1Stub.calledWith('left'));
              ok(!this.page1Stub.calledWith('right'));
            }));

            click('header button:last');

            andThen(Ember.run.bind(this, function() {
              ok(this.page1Stub.calledWith('left'));
              ok(this.page1Stub.calledWith('right'));
            }));
          });
        });

        describe('willTransiton reset', function() {
          it('resets nav options on transition', function() {
            visit('nav-bar');

            andThen(function() {
              equal(find('header h1').text().trim(), 'Index');
            });

            visit('nav-bar/should-reset');

            andThen(Ember.run.bind(this, function() {
              var ctrl = this.lookupController('nav-bar');

              equal(find('header h1').text().trim(), '');
              equal(find('header button:first').text().trim(), '');
              equal(find('header button:last').text().trim(), '');
              deepEqual(ctrl.get('nav'), {title: {}, leftButton: {}, rightButton: {}});
            }));
          });
        });
      });
    });
  });
define("dummy/tests/router.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - .');
    test('router.js should pass jshint', function() { 
      ok(true, 'router.js should pass jshint.'); 
    });
  });
define("dummy/tests/routes/nav-bar/index.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - routes/nav-bar');
    test('routes/nav-bar/index.js should pass jshint', function() { 
      ok(true, 'routes/nav-bar/index.js should pass jshint.'); 
    });
  });
define("dummy/tests/routes/nav-bar/options-from-model.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - routes/nav-bar');
    test('routes/nav-bar/options-from-model.js should pass jshint', function() { 
      ok(true, 'routes/nav-bar/options-from-model.js should pass jshint.'); 
    });
  });
define("dummy/tests/routes/nav-bar/page-1.jshint", 
  [],
  function() {
    "use strict";
    module('JSHint - routes/nav-bar');
    test('routes/nav-bar/page-1.js should pass jshint', function() { 
      ok(true, 'routes/nav-bar/page-1.js should pass jshint.'); 
    });
  });
define("dummy/tests/test-helper", 
  ["dummy/tests/helpers/resolver","ember-qunit"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var resolver = __dependency1__["default"];
    var setResolver = __dependency2__.setResolver;

    setResolver(resolver);

    document.write('<div id="ember-testing-container"><div id="ember-testing"></div></div>');

    QUnit.config.urlConfig.push({ id: 'nocontainer', label: 'Hide container'});
    var containerVisibility = QUnit.urlParams.nocontainer ? 'hidden' : 'visible';
    document.getElementById('ember-testing-container').style.visibility = containerVisibility;
  });
/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"LOG_ACTIVE_GENERATION":false,"LOG_VIEW_LOOKUPS":false,"rootElement":"#ember-testing"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map